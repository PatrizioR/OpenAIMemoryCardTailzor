<!-- MemoryCard.razor -->
@code {
    [Parameter]
    [EditorRequired]
    public MemoryCard Card { get; set; } = null!;
    [Parameter] public EventCallback OnCardClick { get; set; }
    [Parameter] public bool IsFlipped { get; set; }
    [Parameter] public bool HideName{ get; set; }
    private bool _isOverlayVisible;
    private void FlipCard()
    {
        if (Card.IsCollected)
        {
            return;
        }
        OnCardClick.InvokeAsync();
    }
    private void ShowOverlay()
    {
        _isOverlayVisible = true;
    }
    private void ToggleOverlay()
    {
        _isOverlayVisible = !_isOverlayVisible;
    }

    private string CardCss
    {
        get
        {
            if (Card.IsCollected)
            {
                return "relative h-32 w-32 bg-white";
            }
            return "relative h-32 w-32 bg-white shadow-md transition-transform transform hover:scale-105";
        }
    }
}
<div class="@CardCss" @onclick="() => FlipCard()">
    @if (!IsFlipped)
    {
        <div class="p-1">
            <!-- Front side of the card -->
        </div>
    }
    else
    {
        <div class="p-2 h-full w-full">
            @if (!string.IsNullOrEmpty(Card.Content))
            {
                if(Card.Content.StartsWith("<")){
                    @((MarkupString)Card.Content)
                }else
                {
                    var url = Card.Content;
                    if (!url.StartsWith("http"))
                    {
                        // relative path so add base
                        url = $"images/memory_card/{url}";
                    }

                    <img src="@url" />
                }

            }
            @if (!string.IsNullOrEmpty(Card.VideoUrl))
            {
                <button class="absolute top-1 right-1 bg-blue-500 text-white px-2 py-1 rounded-md" @onmouseover="ShowOverlay">&gt;</button>
            }
            @if (!string.IsNullOrEmpty(Card.Name) && !HideName)
            {
                <div title="@Card.Description" class="absolute text-xs bottom-3 left-4 bg-gray-100 text-black px-2 py-1 rounded-md">@Card.Name</div>
            }
        </div>
    }
</div>
@if (_isOverlayVisible)
{
    <div class="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 z-50 flex items-center justify-center">
        <label class="text-xl2">@Card.Name - @Card.Description</label>
        <iframe src="@(Card.VideoUrl)?feature=share" frameborder="0" class="w-5/6 h-5/6"></iframe>
        <button class="absolute top-4 right-4 bg-red-500 text-white px-2 py-1 rounded-md" @onclick="ToggleOverlay">Close</button>
    </div>
}